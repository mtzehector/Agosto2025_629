package mx.att.digital.customermanagement.domain.service;

import mx.att.digital.customermanagement.adapter.in.web.dto.CustomerFVO;
import mx.att.digital.customermanagement.adapter.in.web.dto.CustomerMVO;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class CustomerServiceImplTest {

    @InjectMocks
    private CustomerServiceImpl customerService;

    @Test
    void create_ValidCustomerFVO_ShouldReturnCustomer() {
        // Arrange
        CustomerFVO fvo = new CustomerFVO();
        fvo.setName("Test Company");
        fvo.setStatus("active");

        // Act & Assert
        StepVerifier.create(customerService.create(Mono.just(fvo), "fields"))
            .assertNext(customer -> {
                assertNotNull(customer.getId());
                assertEquals("Test Company", customer.getName());
                assertEquals("active", customer.getStatus());
                assertNotNull(customer.getHref());
            })
            .verifyComplete();
    }

    @Test
    void create_CustomerFVOWithoutStatus_ShouldUseDefaultStatus() {
        // Arrange
        CustomerFVO fvo = new CustomerFVO();
        fvo.setName("Test Company");
        // status is null

        // Act & Assert
        StepVerifier.create(customerService.create(Mono.just(fvo), "fields"))
            .assertNext(customer -> {
                assertEquals("pending", customer.getStatus());
            })
            .verifyComplete();
    }

    @Test
    void list_ShouldReturnFluxOfCustomers() {
        // Act & Assert
        StepVerifier.create(customerService.list(null, null, null))
            .expectNextCount(2)
            .verifyComplete();
    }

    @Test
    void retrieve_ShouldReturnCustomerWithMatchingId() {
        // Act & Assert
        StepVerifier.create(customerService.retrieve("10001", null))
            .assertNext(customer -> {
                assertEquals("10001", customer.getId());
                assertEquals("ACME Corporation", customer.getName());
            })
            .verifyComplete();
    }

    @Test
    void patch_ShouldReturnUpdatedCustomer() {
        // Arrange
        CustomerMVO mvo = new CustomerMVO();
        mvo.setName("Updated Name");
        mvo.setStatus("suspended");

        // Act & Assert
        StepVerifier.create(customerService.patch("10001", Mono.just(mvo), null))
            .assertNext(customer -> {
                assertEquals("10001", customer.getId());
                assertEquals("Updated Name", customer.getName());
                assertEquals("suspended", customer.getStatus());
            })
            .verifyComplete();
    }

    @Test
    void delete_ShouldCompleteSuccessfully() {
        // Act & Assert
        StepVerifier.create(customerService.delete("10001"))
            .verifyComplete();
    }
}