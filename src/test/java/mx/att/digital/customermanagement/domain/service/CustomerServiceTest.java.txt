// src/test/java/mx/att/digital/customermanagement/domain/service/CustomerServiceTest.java
package mx.att.digital.customermanagement.domain.service;

import mx.att.digital.customermanagement.adapter.in.web.dto.Customer;
import mx.att.digital.customermanagement.adapter.in.web.dto.CustomerFVO;
import mx.att.digital.customermanagement.adapter.in.web.dto.CustomerMVO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CustomerServiceTest {

    @Mock
    private CustomerService customerService;

    private CustomerFVO testCustomerFVO;
    private CustomerMVO testCustomerMVO;
    private Customer testCustomer;

    @BeforeEach
    void setUp() {
        testCustomerFVO = new CustomerFVO();
        testCustomerFVO.setName("Test Company");
        testCustomerFVO.setStatus("active");

        testCustomerMVO = new CustomerMVO();
        testCustomerMVO.setName("Updated Company");
        testCustomerMVO.setStatus("suspended");

        testCustomer = new Customer();
        testCustomer.setId("10001");
        testCustomer.setHref("/tmf-api/customer/v5/customer/10001");
        testCustomer.setName("Test Company");
        testCustomer.setStatus("active");
    }

    @Test
    void create_ShouldReturnCustomer() {
        when(customerService.create(any(Mono.class), anyString()))
            .thenReturn(Mono.just(testCustomer));

        StepVerifier.create(customerService.create(Mono.just(testCustomerFVO), "fields"))
            .assertNext(customer -> {
                assertEquals("10001", customer.getId());
                assertEquals("Test Company", customer.getName());
            })
            .verifyComplete();
    }

    @Test
    void list_ShouldReturnCustomers() {
        Customer customer2 = new Customer();
        customer2.setId("10002");
        customer2.setName("Another Company");

        when(customerService.list(anyString(), anyInt(), anyInt()))
            .thenReturn(Flux.just(testCustomer, customer2));

        StepVerifier.create(customerService.list(null, null, null))
            .expectNextCount(2)
            .verifyComplete();
    }

    @Test
    void retrieve_ShouldReturnCustomer() {
        when(customerService.retrieve("10001", "fields"))
            .thenReturn(Mono.just(testCustomer));

        StepVerifier.create(customerService.retrieve("10001", "fields"))
            .assertNext(customer -> {
                assertEquals("10001", customer.getId());
            })
            .verifyComplete();
    }

    @Test
    void patch_ShouldReturnUpdatedCustomer() {
        Customer updatedCustomer = new Customer();
        updatedCustomer.setId("10001");
        updatedCustomer.setName("Updated Company");
        updatedCustomer.setStatus("suspended");

        when(customerService.patch(eq("10001"), any(Mono.class), anyString()))
            .thenReturn(Mono.just(updatedCustomer));

        StepVerifier.create(customerService.patch("10001", Mono.just(testCustomerMVO), "fields"))
            .assertNext(customer -> {
                assertEquals("Updated Company", customer.getName());
                assertEquals("suspended", customer.getStatus());
            })
            .verifyComplete();
    }

    @Test
    void delete_ShouldComplete() {
        when(customerService.delete("10001")).thenReturn(Mono.empty());

        StepVerifier.create(customerService.delete("10001"))
            .verifyComplete();
    }
}