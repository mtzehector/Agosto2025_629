/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mx.att.digital.customermanagement.adapter.in.web;

import mx.att.digital.customermanagement.interfaces.dto.CustomerAttributeValueChangeEvent;
import mx.att.digital.customermanagement.interfaces.dto.CustomerCreateEvent;
import mx.att.digital.customermanagement.interfaces.dto.CustomerDeleteEvent;
import mx.att.digital.customermanagement.interfaces.dto.CustomerStateChangeEvent;
import mx.att.digital.customermanagement.interfaces.dto.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "notification listener", description = "Notifications for Resource Lifecycle and event notifications")
public interface ListenerApi {

    default ListenerApiDelegate getDelegate() {
        return new ListenerApiDelegate() {};
    }

    /**
     * POST /listener/customerAttributeValueChangeEvent : Client listener for entity CustomerAttributeValueChangeEvent
     * Example of a client listener for receiving the notification CustomerAttributeValueChangeEvent
     *
     * @param customerAttributeValueChangeEvent Customer attributeValueChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "customerAttributeValueChangeEvent",
        summary = "Client listener for entity CustomerAttributeValueChangeEvent",
        description = "Example of a client listener for receiving the notification CustomerAttributeValueChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/customerAttributeValueChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> customerAttributeValueChangeEvent(
        @Parameter(name = "CustomerAttributeValueChangeEvent", description = "Customer attributeValueChange Event payload", required = true) @Valid @RequestBody Mono<CustomerAttributeValueChangeEvent> customerAttributeValueChangeEvent,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().customerAttributeValueChangeEvent(customerAttributeValueChangeEvent, exchange);
    }


    /**
     * POST /listener/customerCreateEvent : Client listener for entity CustomerCreateEvent
     * Example of a client listener for receiving the notification CustomerCreateEvent
     *
     * @param customerCreateEvent Customer create Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "customerCreateEvent",
        summary = "Client listener for entity CustomerCreateEvent",
        description = "Example of a client listener for receiving the notification CustomerCreateEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/customerCreateEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> customerCreateEvent(
        @Parameter(name = "CustomerCreateEvent", description = "Customer create Event payload", required = true) @Valid @RequestBody Mono<CustomerCreateEvent> customerCreateEvent,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().customerCreateEvent(customerCreateEvent, exchange);
    }


    /**
     * POST /listener/customerDeleteEvent : Client listener for entity CustomerDeleteEvent
     * Example of a client listener for receiving the notification CustomerDeleteEvent
     *
     * @param customerDeleteEvent Customer delete Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "customerDeleteEvent",
        summary = "Client listener for entity CustomerDeleteEvent",
        description = "Example of a client listener for receiving the notification CustomerDeleteEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/customerDeleteEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> customerDeleteEvent(
        @Parameter(name = "CustomerDeleteEvent", description = "Customer delete Event payload", required = true) @Valid @RequestBody Mono<CustomerDeleteEvent> customerDeleteEvent,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().customerDeleteEvent(customerDeleteEvent, exchange);
    }


    /**
     * POST /listener/customerStateChangeEvent : Client listener for entity CustomerStateChangeEvent
     * Example of a client listener for receiving the notification CustomerStateChangeEvent
     *
     * @param customerStateChangeEvent Customer stateChange Event payload (required)
     * @return Notified (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "customerStateChangeEvent",
        summary = "Client listener for entity CustomerStateChangeEvent",
        description = "Example of a client listener for receiving the notification CustomerStateChangeEvent",
        tags = { "notification listener" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notified"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/listener/customerStateChangeEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> customerStateChangeEvent(
        @Parameter(name = "CustomerStateChangeEvent", description = "Customer stateChange Event payload", required = true) @Valid @RequestBody Mono<CustomerStateChangeEvent> customerStateChangeEvent,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().customerStateChangeEvent(customerStateChangeEvent, exchange);
    }

}
