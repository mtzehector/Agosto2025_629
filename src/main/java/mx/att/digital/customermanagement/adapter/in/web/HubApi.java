/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mx.att.digital.customermanagement.adapter.in.web;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import mx.att.digital.customermanagement.interfaces.dto.Error;
import mx.att.digital.customermanagement.interfaces.dto.Hub;
import mx.att.digital.customermanagement.interfaces.dto.HubFVO;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "events subscription", description = "Endpoints to register and terminate an Event Listener")
public interface HubApi {

    default HubApiDelegate getDelegate() {
        return new HubApiDelegate() {};
    }

    /**
     * POST /hub : Create a subscription (hub) to receive Events
     * Sets the communication endpoint to receive Events.
     *
     * @param hubFVO Data containing the callback endpoint to deliver the information (required)
     * @return Notified (status code 201)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "createHub",
        summary = "Create a subscription (hub) to receive Events",
        description = "Sets the communication endpoint to receive Events.",
        tags = { "events subscription" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Notified", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Hub.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/hub",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Hub>> createHub(
        @Parameter(name = "HubFVO", description = "Data containing the callback endpoint to deliver the information", required = true) @Valid @RequestBody Mono<HubFVO> hubFVO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().createHub(hubFVO, exchange);
    }


    /**
     * DELETE /hub/{id} : Remove a subscription (hub) to receive Events
     * 
     *
     * @param id Identifier of the Resource (required)
     * @return Deleted (status code 204)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "hubDelete",
        summary = "Remove a subscription (hub) to receive Events",
        description = "",
        tags = { "events subscription" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/hub/{id}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> hubDelete(
        @Parameter(name = "id", description = "Identifier of the Resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().hubDelete(id, exchange);
    }


    /**
     * GET /hub/{id} : Retrieve a subscription (hub)
     * 
     *
     * @param id Identifier of the Resource (required)
     * @return Notified (status code 200)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "hubGet",
        summary = "Retrieve a subscription (hub)",
        description = "",
        tags = { "events subscription" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Notified", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Hub.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/hub/{id}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Hub>> hubGet(
        @Parameter(name = "id", description = "Identifier of the Resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().hubGet(id, exchange);
    }

}
