package mx.att.digital.customermanagement.interfaces.dto;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import mx.att.digital.customermanagement.interfaces.dto.CharacteristicRelationshipMVO;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import jakarta.annotation.Generated;

/**
 * CharacteristicMVO
 */

@JsonIgnoreProperties(
  value = "@type", // ignore manually set @type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BooleanArrayCharacteristicMVO.class, name = "BooleanArrayCharacteristic"),
  @JsonSubTypes.Type(value = BooleanCharacteristicMVO.class, name = "BooleanCharacteristic"),
  @JsonSubTypes.Type(value = CharacteristicMVO.class, name = "Characteristic"),
  @JsonSubTypes.Type(value = FloatCharacteristicMVO.class, name = "FloatCharacteristic"),
  @JsonSubTypes.Type(value = IntegerArrayCharacteristicMVO.class, name = "IntegerArrayCharacteristic"),
  @JsonSubTypes.Type(value = IntegerCharacteristicMVO.class, name = "IntegerCharacteristic"),
  @JsonSubTypes.Type(value = NumberArrayCharacteristicMVO.class, name = "NumberArrayCharacteristic"),
  @JsonSubTypes.Type(value = NumberCharacteristicMVO.class, name = "NumberCharacteristic"),
  @JsonSubTypes.Type(value = ObjectArrayCharacteristicMVO.class, name = "ObjectArrayCharacteristic"),
  @JsonSubTypes.Type(value = ObjectCharacteristicMVO.class, name = "ObjectCharacteristic"),
  @JsonSubTypes.Type(value = StringArrayCharacteristicMVO.class, name = "StringArrayCharacteristic"),
  @JsonSubTypes.Type(value = StringCharacteristicMVO.class, name = "StringCharacteristic")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
public class CharacteristicMVO implements Serializable {

  private static final long serialVersionUID = 1L;

  private String name;

  private String valueType;

  @Valid
  private List<CharacteristicRelationshipMVO> characteristicRelationship = new ArrayList<>();

  public CharacteristicMVO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the characteristic
   * @return name
   */
  
  @Schema(name = "name", description = "Name of the characteristic", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CharacteristicMVO valueType(String valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * Data type of the value of the characteristic
   * @return valueType
   */
  
  @Schema(name = "valueType", description = "Data type of the value of the characteristic", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("valueType")
  public String getValueType() {
    return valueType;
  }

  public void setValueType(String valueType) {
    this.valueType = valueType;
  }

  public CharacteristicMVO characteristicRelationship(List<CharacteristicRelationshipMVO> characteristicRelationship) {
    this.characteristicRelationship = characteristicRelationship;
    return this;
  }

  public CharacteristicMVO addCharacteristicRelationshipItem(CharacteristicRelationshipMVO characteristicRelationshipItem) {
    if (this.characteristicRelationship == null) {
      this.characteristicRelationship = new ArrayList<>();
    }
    this.characteristicRelationship.add(characteristicRelationshipItem);
    return this;
  }

  /**
   * Collection of characteristic relationships
   * @return characteristicRelationship
   */
  @Valid 
  @Schema(name = "characteristicRelationship", description = "Collection of characteristic relationships", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("characteristicRelationship")
  public List<CharacteristicRelationshipMVO> getCharacteristicRelationship() {
    return characteristicRelationship;
  }

  public void setCharacteristicRelationship(List<CharacteristicRelationshipMVO> characteristicRelationship) {
    this.characteristicRelationship = characteristicRelationship;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CharacteristicMVO characteristicMVO = (CharacteristicMVO) o;
    return Objects.equals(this.name, characteristicMVO.name) &&
        Objects.equals(this.valueType, characteristicMVO.valueType) &&
        Objects.equals(this.characteristicRelationship, characteristicMVO.characteristicRelationship);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, valueType, characteristicRelationship);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CharacteristicMVO {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    characteristicRelationship: ").append(toIndentedString(characteristicRelationship)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

